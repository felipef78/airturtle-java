/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package airturtle;
//

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.basic.BasicComboBoxRenderer;

/**
 *
 * @author ronnie
 */
public class MainGUI extends javax.swing.JFrame implements ActionListener,
        ListSelectionListener {

    /**
     * Creates new form MainGUI
     */
    CiaAerea cia;

    public MainGUI(CiaAerea cia) {
        initComponents();
        this.cia = cia;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        c_aeronave = new javax.swing.JMenuItem();
        c_cliente = new javax.swing.JMenuItem();
        c_destino = new javax.swing.JMenuItem();
        c_voo = new javax.swing.JMenuItem();
        quitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        a_aeronave = new javax.swing.JMenuItem();
        a_cliente = new javax.swing.JMenuItem();
        a_destino = new javax.swing.JMenuItem();
        a_reserva = new javax.swing.JMenuItem();
        a_voo = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        r_aeronave = new javax.swing.JMenuItem();
        r_cliente = new javax.swing.JMenuItem();
        r_destino = new javax.swing.JMenuItem();
        r_reserva = new javax.swing.JMenuItem();
        r_voo = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        c_reserva = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setMnemonic('C');
        jMenu1.setText("Cadastrar");

        c_aeronave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        c_aeronave.setMnemonic('A');
        c_aeronave.setText("Aeronave");
        c_aeronave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_aeronaveActionPerformed(evt);
            }
        });
        jMenu1.add(c_aeronave);

        c_cliente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        c_cliente.setMnemonic('C');
        c_cliente.setText("Cliente");
        c_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_clienteActionPerformed(evt);
            }
        });
        jMenu1.add(c_cliente);

        c_destino.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        c_destino.setMnemonic('D');
        c_destino.setText("Destino");
        c_destino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_destinoActionPerformed(evt);
            }
        });
        jMenu1.add(c_destino);

        c_voo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        c_voo.setMnemonic('V');
        c_voo.setText("Voo");
        c_voo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_vooActionPerformed(evt);
            }
        });
        jMenu1.add(c_voo);

        quitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenu.setMnemonic('S');
        quitMenu.setText("Sair");
        quitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuActionPerformed(evt);
            }
        });
        jMenu1.add(quitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('A');
        jMenu2.setText("Alterar");

        a_aeronave.setMnemonic('A');
        a_aeronave.setText("Aeronave");
        a_aeronave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_aeronaveActionPerformed(evt);
            }
        });
        jMenu2.add(a_aeronave);

        a_cliente.setMnemonic('C');
        a_cliente.setText("Cliente");
        a_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_clienteActionPerformed(evt);
            }
        });
        jMenu2.add(a_cliente);

        a_destino.setMnemonic('D');
        a_destino.setText("Destino");
        a_destino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_destinoActionPerformed(evt);
            }
        });
        jMenu2.add(a_destino);

        a_reserva.setMnemonic('R');
        a_reserva.setText("Reserva");
        a_reserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_reservaActionPerformed(evt);
            }
        });
        jMenu2.add(a_reserva);

        a_voo.setMnemonic('V');
        a_voo.setText("Voo");
        a_voo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_vooActionPerformed(evt);
            }
        });
        jMenu2.add(a_voo);

        jMenuBar1.add(jMenu2);

        jMenu6.setText("Consultar");

        jMenuItem3.setText("Aeronave");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem3);

        jMenuItem4.setText("Cliente");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem4);

        jMenuItem5.setText("Destino");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem5);

        jMenuItem6.setText("Reserva");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuItem7.setText("Voo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem7);

        jMenuBar1.add(jMenu6);

        jMenu3.setMnemonic('R');
        jMenu3.setText("Remover");

        r_aeronave.setMnemonic('A');
        r_aeronave.setText("Aeronave");
        r_aeronave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_aeronaveActionPerformed(evt);
            }
        });
        jMenu3.add(r_aeronave);

        r_cliente.setMnemonic('C');
        r_cliente.setText("Cliente");
        r_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_clienteActionPerformed(evt);
            }
        });
        jMenu3.add(r_cliente);

        r_destino.setMnemonic('C');
        r_destino.setText("Destino");
        r_destino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_destinoActionPerformed(evt);
            }
        });
        jMenu3.add(r_destino);

        r_reserva.setMnemonic('R');
        r_reserva.setText("Reserva");
        r_reserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_reservaActionPerformed(evt);
            }
        });
        jMenu3.add(r_reserva);

        r_voo.setMnemonic('V');
        r_voo.setText("Voo");
        r_voo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_vooActionPerformed(evt);
            }
        });
        jMenu3.add(r_voo);

        jMenuBar1.add(jMenu3);

        jMenu4.setMnemonic('G');
        jMenu4.setText("Gerar");

        jMenuItem1.setMnemonic('O');
        jMenuItem1.setText("Faturamento Otimista");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem2.setMnemonic('P');
        jMenuItem2.setText("Faturamento Pessimista");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        jMenu5.setMnemonic('E');
        jMenu5.setText("Efetuar");

        c_reserva.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        c_reserva.setMnemonic('R');
        c_reserva.setText("Reserva");
        c_reserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_reservaActionPerformed(evt);
            }
        });
        jMenu5.add(c_reserva);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 762, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitMenuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_quitMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }// GEN-LAST:event_quitMenuActionPerformed

    private void c_clienteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_c_clienteActionPerformed
        // TODO add your handling code here:
        criaInterfaceGrafica(new Cliente(), false, false);
        // CCliente cCliente = new CCliente(this, true);
        // cCliente.setVisible(true);
    }// GEN-LAST:event_c_clienteActionPerformed

    private void c_aeronaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_c_aeronaveActionPerformed
        // TODO add your handling code here:
        Aeronave aer = new Aeronave();
        criaInterfaceGrafica(aer, false, false);
        // CAeronave cAeronave = new CAeronave(this, true);
        // cAeronave.setVisible(true);

    }// GEN-LAST:event_c_aeronaveActionPerformed

    private void removePanelAnterior() {
        JRootPane pane = (JRootPane) this.getComponent(0);
        for (Object jlp : pane.getComponents()) {
            if (jlp.getClass() == new JLayeredPane().getClass()) {
                JLayeredPane jlpC = (JLayeredPane) jlp;
                for (Object object : jlpC.getComponents()) {
                    if (object.getClass() == new JPanel().getClass()) {
                        JPanel jp = (JPanel) object;
                        for (Component object1 : jp.getComponents()) {
                            jp.remove(object1);
                        }
                    }
                }
            }
        }
        this.validate();
        this.repaint();
    }

    private JPanel pegaUltimoPanel() {
        JRootPane pane = (JRootPane) this.getComponent(0);
        JPanel jpanelao = null;
        for (Object jlp : pane.getComponents()) {
            if (jlp.getClass() == new JLayeredPane().getClass()) {
                JLayeredPane jlpC = (JLayeredPane) jlp;
                for (Object object : jlpC.getComponents()) {
                    if (object.getClass() == new JPanel().getClass()) {
                        JPanel jp = (JPanel) object;
                        for (Component object1 : jp.getComponents()) {
                            jpanelao = (JPanel) object1;
                        }
                    }
                }
            }
        }
        return jpanelao;
    }

    private JPanel pegaUltimoPanelRemover() {
        JRootPane pane = (JRootPane) this.getComponent(0);
        JPanel jpanelao = null;
        for (Object jlp : pane.getComponents()) {
            if (jlp.getClass() == new JLayeredPane().getClass()) {
                JLayeredPane jlpC = (JLayeredPane) jlp;
                for (Object object : jlpC.getComponents()) {
                    if (object.getClass() == new JPanel().getClass()) {
                        JPanel jp = (JPanel) object;
                        for (Component object1 : jp.getComponents()) {
                            jpanelao = (JPanel) object1;
                            for (Component object2 : jpanelao.getComponents()) {
                                if (object2
                                        .getClass()
                                        .toString()
                                        .equals(new JPanel().getClass()
                                                .toString())) {
                                    jpanelao = (JPanel) object2;
                                }
                            }
                        }
                    }
                }
            }
        }
        return jpanelao;
    }

    private boolean cadastraTudo(JPanel ultJPanel, Object obj, boolean pes,
            boolean end, boolean des, boolean alt) {
        boolean repete = false;
        // boolean end = false;

        if (obj.getClass() == new Aeronave().getClass()) {
            Aeronave objeto = (Aeronave) obj;
        } else if (obj.getClass() == new Cliente().getClass()) {
            Cliente objeto = (Cliente) obj;
            // Cliente tem pessoa
        } else if (obj.getClass() == new Destino().getClass()) {
            Destino objeto = (Destino) obj;
            // end = true;
        } else if (obj.getClass() == new Reserva().getClass()) {
            Reserva objeto = (Reserva) obj;
        } else if (obj.getClass() == new Voo().getClass()) {
            Voo objeto = (Voo) obj;
        } else if (obj.getClass() == new Pessoa().getClass()) {
            Pessoa objeto = (Pessoa) obj;
            // end = true;
        }

        List lista = new ArrayList();
        for (Component comp : ultJPanel.getComponents()) {
            if (comp.getClass() == new JTextField().getClass()) {
                JTextField campo = (JTextField) comp;
                lista.add(campo.getText());
            } else if (comp.getClass() == new JComboBox().getClass()) {
                JComboBox campo = (JComboBox) comp;
                lista.add(campo.getSelectedItem());
            } else if (comp.getClass() == new JCheckBox().getClass()) {
                JCheckBox campo = (JCheckBox) comp;
                lista.add(campo.isSelected());
            }
        }

        // Endereco
        if (end && des) {
            try {
                // criaInterfaceGrafica(new Endereco());
                Endereco endereco = new Endereco();

                endereco.setCampos(lista);
                cia.destinos.get(cia.destinos.size() - 1).setEndereco(endereco);
                Persistencia gr = new Persistencia();
                gr.gravarEAlterar(cia.destinos.get(cia.destinos.size() - 1));
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "ArrayIndexOutOfBoundsException",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }

        } else if (end && pes) {
            try {
                Endereco endereco = new Endereco();
                endereco.setCampos(lista);
                cia.clientes.get(cia.clientes.size() - 1).setEndereco(endereco);
                Persistencia gr = new Persistencia();
                gr.gravarEAlterar(cia.clientes.get(cia.clientes.size() - 1));
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "ArrayIndexOutOfBoundsException",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (end && alt) {
            try {
                Endereco endereco = new Endereco();
                endereco.setCampos(lista);

                cia.clientes.get(indexxx2).setEndereco(endereco);
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "ArrayIndexOutOfBoundsException",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (pes && !alt) {
            try {
                Pessoa objeto = (Pessoa) obj;
                for (Object object : lista) {
                    System.out.println(object.toString());
                }
                objeto.setCampos(lista);
                cia.clientes.get(cia.clientes.size() - 1).setPessoa(objeto);
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "ArrayIndexOutOfBoundsException",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            } catch (CPF_InvalidoException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "Aten��o!",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (pes && alt) {
            try {
                Pessoa objeto = (Pessoa) obj;
                objeto.setCampos(lista);
                cia.clientes.get(indexxx2).setPessoa(objeto);
                Persistencia al = new Persistencia();
                al.gravarEAlterar(cia.clientes.get(indexxx2));
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "ArrayIndexOutOfBoundsException",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            } catch (CPF_InvalidoException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "Aten��o!",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        }

        if (obj.getClass() == new Aeronave().getClass() && alt) {
            try {
                cia.aeronaves.get(indexxx2).setCampos(lista);
                Persistencia al = new Persistencia();
                al.gravarEAlterar(cia.aeronaves.get(indexxx2));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }

        } else if (obj.getClass() == new Aeronave().getClass()) {
            try {
                Aeronave objeto = (Aeronave) obj;
                objeto.setCampos(lista);
                Persistencia gr = new Persistencia();
                gr.gravarEAlterar(objeto);
                cia.aeronaves.add(objeto);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (obj.getClass() == new Destino().getClass() && alt) {
            try {
                cia.destinos.get(indexxx2).setCampos(lista);
                Persistencia al = new Persistencia();
                al.gravarEAlterar(cia.destinos.get(indexxx2));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;

            }

        } else if (obj.getClass() == new Destino().getClass()) {
            try {
                Destino objeto = (Destino) obj;
                objeto.setCampos(lista);

                cia.destinos.add(objeto);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;

            }
        } else if (obj.getClass() == new Reserva().getClass() && alt) {
            try {
                cia.reservas.get(indexxx2).setCampos(lista);
                Persistencia al = new Persistencia();
                al.gravarEAlterar(cia.reservas.get(indexxx2));
            } catch (NumberFormatException e) {

                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (obj.getClass() == new Reserva().getClass()) {
            try {
                Reserva objeto = (Reserva) obj;
                objeto.setCampos(lista);
                Persistencia gr = new Persistencia();
                gr.gravarEAlterar(objeto);
                cia.reservas.add(objeto);
            } catch (NumberFormatException e) {

                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (obj.getClass() == new Voo().getClass() && alt) {
            try {
                cia.voos.get(indexxx2).setCampos(lista);
                Persistencia al = new Persistencia();
                al.gravarEAlterar(cia.voos.get(indexxx2));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            } catch (AeronaveIndisponivelException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "Aten��o!",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }

        } else if (obj.getClass() == new Voo().getClass()) {
            try {
                Voo objeto = (Voo) obj;
                objeto.setCampos(lista);
                Persistencia gr = new Persistencia();
                gr.gravarEAlterar(objeto);
                cia.voos.add(objeto);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
//            } catch (NullPointerException e) {
//                JOptionPane.showMessageDialog(null,
//                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
//                        JOptionPane.WARNING_MESSAGE);
//                repete = true;
            } catch (AeronaveIndisponivelException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(),
                        "Aten��o!",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (obj.getClass() == new Cliente().getClass() && alt) {
            try {
                cia.clientes.get(indexxx2).setCampos(lista);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        } else if (obj.getClass() == new Cliente().getClass()) {
            try {
                Cliente cliente = (Cliente) obj;
                cliente.setCampos(lista);
                cia.clientes.add(cliente);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Exce��o: " + e.getMessage(), "Valor inv�lido",
                        JOptionPane.WARNING_MESSAGE);
                repete = true;
            }
        }

        return repete;

    }

    class ItemRenderer extends BasicComboBoxRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list, Object value, int index,
                boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index,
                    isSelected, cellHasFocus);
            try {
                if (value.getClass() == new Aeronave().getClass()) {
                    Aeronave item = (Aeronave) value;
                    setText("Aeronave_" + item.getPrefixo_Identificador());
                    setIcon(null);
                } else if (value.getClass() == new Destino().getClass()) {
                    Destino item = (Destino) value;
                    setText("Destino_" + item.getId());
                    setIcon(null);
                } else if (value.getClass() == new Voo().getClass()) {
                    Voo item = (Voo) value;
                    setText("Voo_" + item.getCodigo_Identificador());
                    setIcon(null);
                }
            } catch (Exception e) {
                //System.out.println(e.getMessage());
            }

            return this;
        }
    }

    class CellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list, Object value, int index,
                boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index,
                    isSelected, cellHasFocus);

            if (value.getClass() == new Aeronave().getClass()) {
                Aeronave item = (Aeronave) value;
                setText("Aeronave_" + item.getPrefixo_Identificador());
                setIcon(null);
            } else if (value.getClass() == new Destino().getClass()) {
                Destino item = (Destino) value;
                setText("Destino_" + item.getId());
                setIcon(null);
            } else if (value.getClass() == new Voo().getClass()) {
                Voo item = (Voo) value;
                setText("Voo_" + item.getCodigo_Identificador());
                setIcon(null);
            } else if (value.getClass() == new Reserva().getClass()) {
                Reserva item = (Reserva) value;
                setText("Reserva_" + item.getId());
                setIcon(null);
            } else if (value.getClass() == new Cliente().getClass()) {
                Cliente item = (Cliente) value;
                setText("Cliente_" + item.getCpf());
                setIcon(null);
            }
            return this;
        }
    }

    private void criaInterfaceGrafica(final Object obj, boolean pes, boolean des) {
        removePanelAnterior();
        Class reflection = obj.getClass();
        JPanel operacao = new JPanel();
        GridLayout floLay = new GridLayout(0, 2, 5, 10);
        operacao.setLayout(floLay);

        this.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        this.add(operacao);
        for (Field campo : reflection.getDeclaredFields()) {
            if (campo.getType().isPrimitive()
                    || campo.getType() == new String().getClass()) {
                if (campo.getType() == boolean.class) {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }
                    operacao.add(new JLabel(name));
                    operacao.add(new JCheckBox());
                } else {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }

                    operacao.add(new JLabel(name));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());
                    operacao.add(jtf);
                }
            } else if (campo.getType() == new Aeronave().getClass()) {
                DefaultComboBoxModel dcm = new DefaultComboBoxModel();

                for (Aeronave aeronave : cia.aeronaves) {
                    dcm.addElement(aeronave);
                }
                String name = new String();
                for (String str : campo.getName().split("_")) {
                    name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                }
                operacao.add(new JLabel(name));
                JComboBox jcb = new JComboBox(dcm);
                jcb.setRenderer(new ItemRenderer());
                operacao.add(jcb);

            } else if (campo.getType() == new Voo().getClass()) {
                DefaultComboBoxModel dcm = new DefaultComboBoxModel();
                for (Voo voo : cia.voos) {
                    dcm.addElement(voo);
                }
                String name = new String();
                for (String str : campo.getName().split("_")) {
                    name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                }
                JComboBox jcb = new JComboBox(dcm);
                jcb.setRenderer(new ItemRenderer());
                operacao.add(new JLabel(name));
                operacao.add(jcb);
            } else if (campo.getType() == new Destino().getClass()) {
                DefaultComboBoxModel dcm = new DefaultComboBoxModel();
                for (Destino dest : cia.destinos) {
                    dcm.addElement(dest);
                }
                String name = new String();
                for (String str : campo.getName().split("_")) {
                    name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                }
                operacao.add(new JLabel(name));
                JComboBox jcb = new JComboBox(dcm);
                jcb.setRenderer(new ItemRenderer());
                operacao.add(jcb);
            } else if (campo.getType() == new Date().getClass()) {
                String name = new String();
                for (String str : campo.getName().split("_")) {
                    name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                }
                operacao.add(new JLabel(name));
                JTextField jtf = new JTextField();
                jtf.setName(campo.getName());
                operacao.add(jtf);
            }

        }
        JButton botao = new JButton("Submeter");
        botao.setName(obj.toString());
        operacao.add(botao);
        if (pes) {
            operacao.setName(obj.getClass().toString() + "pes");
        } else if (des) {
            operacao.setName(obj.getClass().toString() + "des");
        } else {
            operacao.setName(obj.getClass().toString());
        }
        botao.addActionListener(this);

        this.validate();
        this.repaint();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "Submeter": {
                JPanel ultJPanel = pegaUltimoPanel();
                if (ultJPanel.getName().equals(new Aeronave().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Aeronave(), false, false, false, false);
                    if (repete) {
                        criaInterfaceGrafica(new Aeronave(), false, false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Cadastro feito com sucesso.");
                        criaInterfaceGrafica(new Aeronave(), false, false);
                    }
                } else if (ultJPanel.getName().equals(new Cliente().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Cliente(), false, false, false, false);
                    if (repete) {
                        criaInterfaceGrafica(new Cliente(), false, false);
                    } else {
                        criaInterfaceGrafica(new Pessoa(), false, false);
                    }
                } else if (ultJPanel.getName().equals(new Destino().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Destino(), false, false, false, false);
                    if (repete) {
                        criaInterfaceGrafica(new Destino(), false, false);
                    } else {
                        criaInterfaceGrafica(new Endereco(), false, true);
                    }
                } else if (ultJPanel.getName().equals(new Voo().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Voo(), false, false, false, false);
                    if (repete) {
                        criaInterfaceGrafica(new Voo(), false, false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Cadastro feito com sucesso.");
                        criaInterfaceGrafica(new Voo(), false, false);
                    }
                } else if (ultJPanel.getName().equals(new Reserva().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Reserva(), false, false, false, false);
                    if (repete) {
                        criaInterfaceGrafica(new Reserva(), false, false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Cadastro feito com sucesso.");
                        criaInterfaceGrafica(new Reserva(), false, false);
                    }
                } else if (ultJPanel.getName().equals(new Pessoa().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Pessoa(), true, false, false, false);
                    if (repete) {
                        criaInterfaceGrafica(new Pessoa(), true, false);
                    } else {
                        criaInterfaceGrafica(new Endereco(), true, false);
                    }
                } else if (ultJPanel.getName().equals(new Endereco().getClass().toString() + "pes")) {
                    boolean repete = cadastraTudo(ultJPanel, new Endereco(), true, true, false, false);
                    if (repete) {
                        criaInterfaceGrafica(new Endereco(), true, false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Cadastro feito com sucesso.");
                        criaInterfaceGrafica(new Cliente(), false, false);
                    }
                } else if (ultJPanel.getName().equals(new Endereco().getClass().toString() + "des")) {
                    //boolean repete = cadastraTudo(ultJPanel, new Endereco(), true, true, false, false);
                    boolean repete = cadastraTudo(ultJPanel, new Endereco(), false, true, true, false);
                    if (repete) {
                        criaInterfaceGrafica(new Endereco(), false, true);
                    } else {
                        JOptionPane.showMessageDialog(null, "Cadastro feito com sucesso.");
                        criaInterfaceGrafica(new Cliente(), false, false);
                    }
                }
                break;
            }
            case "Remover": {
                JPanel ultJPanel = pegaUltimoPanelRemover();
                Persistencia p = new Persistencia();
                if (ultJPanel.getName().equals(new Aeronave().getClass().toString())) {
                    String s = new Aeronave().getClass().getName() + "_" + cia.aeronaves.get(indexxx).getPrefixo_Identificador() + ".ser";
                    p.deletar(new Aeronave(), s);
                    cia.removerAeronave(indexxx);
                    criaInterfaceGraficaRemover(new Aeronave());
                } else if (ultJPanel.getName().equals(new Cliente().getClass().toString())) {
                    String s = new Cliente().getClass().getName() + "_" + cia.clientes.get(indexxx).getCpf() + ".ser";
                    p.deletar(new Cliente(), s);
                    cia.removerCliente(indexxx);
                    criaInterfaceGraficaRemover(new Cliente());
                } else if (ultJPanel.getName().equals(new Destino().getClass().toString())) {
                    String s = new Destino().getClass().getName() + "_" + cia.destinos.get(indexxx).getId() + ".ser";
                    p.deletar(new Destino(), s);
                    cia.removerDestino(indexxx);
                    criaInterfaceGraficaRemover(new Destino());
                } else if (ultJPanel.getName().equals(new Voo().getClass().toString())) {
                    String s = new Voo().getClass().getName() + "_" + cia.voos.get(indexxx).getCodigo_Identificador() + ".ser";
                    p.deletar(new Voo(), s);
                    cia.removerVoo(indexxx);
                    criaInterfaceGraficaRemover(new Voo());
                } else if (ultJPanel.getName().equals(new Reserva().getClass().toString())) {
                    String s = new Reserva().getClass().getName() + "_" + cia.reservas.get(indexxx).getId() + ".ser";
                    p.deletar(new Reserva(), s);
                    cia.cancelarReserva(indexxx);
                    criaInterfaceGraficaRemover(new Reserva());
                }
                break;
            }
            case "Alterar": {
                JPanel ultJPanel = pegaUltimoPanelRemover();
                if (ultJPanel.getName().equals(new Aeronave().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Aeronave(), false, false, false, true);
                    if (repete) {
                        criaInterfaceGraficaAlterar(new Aeronave());
                    } else {
                        JOptionPane.showMessageDialog(null, "Alterado.");
                        criaInterfaceGraficaAlterar(new Aeronave());
                    }
                } else if (ultJPanel.getName().equals(new Cliente().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Cliente(), false, false, false, true);
                    if (repete) {
                        criaInterfaceGraficaAlterar(new Cliente());
                    } else {
                        JOptionPane.showMessageDialog(null, "Alterado.");
                        criaInterfaceGraficaAlterar(new Cliente());
                    }
                } else if (ultJPanel.getName().equals(new Destino().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Destino(), false, false, false, true);
                    if (repete) {
                        criaInterfaceGraficaAlterar(new Destino());
                    } else {
                        JOptionPane.showMessageDialog(null, "Alterado.");
                        criaInterfaceGraficaAlterar(new Destino());
                    }
                } else if (ultJPanel.getName().equals(new Voo().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Voo(), false, false, false, true);
                    if (repete) {
                        criaInterfaceGraficaAlterar(new Voo());
                    } else {
                        JOptionPane.showMessageDialog(null, "Alterado");
                        criaInterfaceGraficaAlterar(new Voo());
                    }
                } else if (ultJPanel.getName().equals(new Reserva().getClass().toString())) {
                    boolean repete = cadastraTudo(ultJPanel, new Reserva(), false, false, false, true);
                    if (repete) {
                        criaInterfaceGraficaAlterar(new Reserva());
                    } else {
                        JOptionPane.showMessageDialog(null, "Alterado");
                        criaInterfaceGraficaAlterar(new Reserva());
                    }
                }
                break;
            }
        }
    }
    public int indexxx;

    private void criaInterfaceGraficaRemover(final Object obj) {
        removePanelAnterior();
        Class reflection = obj.getClass();
        JPanel operacao = new JPanel();
        JPanel operacao2 = new JPanel();
        BorderLayout borLay = new BorderLayout();
        GridLayout floLay = new GridLayout(0, 2, 5, 10);
        operacao.setLayout(floLay);
        operacao2.setLayout(floLay);
        // operacao2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        this.setLayout(new BorderLayout());
        DefaultListModel listModel = new DefaultListModel();
        if (obj.getClass() == new Aeronave().getClass()) {
            for (Aeronave a : cia.aeronaves) {
                listModel.addElement(a);
            }
        } else if (obj.getClass() == new Cliente().getClass()) {
            for (Cliente c : cia.clientes) {
                listModel.addElement(c);
            }
        } else if (obj.getClass() == new Destino().getClass()) {
            for (Destino d : cia.destinos) {
                listModel.addElement(d);
            }
        } else if (obj.getClass() == new Reserva().getClass()) {
            for (Reserva r : cia.reservas) {
                listModel.addElement(r);
            }
        } else if (obj.getClass() == new Voo().getClass()) {
            for (Voo v : cia.voos) {
                listModel.addElement(v);
            }
        }
        final JList list = new JList(listModel);
        list.setLayoutOrientation(JList.VERTICAL);
        list.setVisible(true);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scroll = new JScrollPane(list);
        scroll.setPreferredSize(new Dimension(100, 500));
        scroll.setName("scroll_lista");
        this.add(operacao);
        operacao.add(scroll, BorderLayout.WEST);
        operacao.add(operacao2, BorderLayout.CENTER);

        final List jt = new ArrayList<>();
        //final List<JCheckBox> listaCheck = new ArrayList<>();

        for (Field campo : reflection.getDeclaredFields()) {
            if (campo.getType().isPrimitive() || campo.getType() == new String().getClass()) {
                if (campo.getType() == boolean.class) {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }
                    operacao2.add(new JLabel(name));
                    JCheckBox jcb = new JCheckBox();
                    jcb.setName(campo.getName());
                    operacao2.add(jcb);
                    jt.add(jcb);

                } else {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }
                    operacao2.add(new JLabel(name));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(false);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }
            }else if (campo.getType() == new Endereco().getClass()){
                operacao2.add(new JLabel("Endereco"));
                JTextField jtf = new JTextField();
                jtf.setName(campo.getName());

                jtf.setEditable(false);
                operacao2.add(jtf);
                jt.add(jtf);
            }
        }
        // Coloca os campos da classe Pessoa.
        if (obj.getClass() == new Cliente().getClass()) {
            Class reflect = new Pessoa().getClass();
            for (Field campo : reflect.getDeclaredFields()) {
                if (campo.getType().isPrimitive()
                        || campo.getType() == new String().getClass()) {
                    operacao2.add(new JLabel(campo.getName()));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(false);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }else{
                    operacao2.add(new JLabel("Endereco"));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(false);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }
            }
        }
        list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                int i = list.getSelectedIndex();
                if (i != -1) {
                    if (obj.getClass() == new Aeronave().getClass()) {
                        Aeronave aero = new Aeronave();
                        List<String> aux = aero.consultarAeronave(cia.aeronaves
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Cliente().getClass()) {
                        Cliente cli = new Cliente();
                        List<String> aux = cli.consultarCliente(cia.clientes
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Destino().getClass()) {
                        Destino des = new Destino();
                        List<String> aux = des.consultarDestino(cia.destinos
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Reserva().getClass()) {
                        Reserva res = new Reserva();
                        List<String> aux = res.consultarReserva(cia.reservas
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Voo().getClass()) {
                        Voo vo = new Voo();
                        List<String> aux = vo.consultarVoo(cia.voos.get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    }
                    indexxx = i;
                }
            }
        });

        JButton botao = new JButton("Remover");
        list.setCellRenderer(new CellRenderer());
        botao.setName(obj.toString());
        operacao2.add(botao);
        operacao.setName("container_lista_campos");
        operacao2.setName(obj.getClass().toString());
        botao.addActionListener(this);

        this.validate();
        this.repaint();
    }
    public int indexxx2;

    private void criaInterfaceGraficaAlterar(final Object obj) {
        removePanelAnterior();
        Class reflection = obj.getClass();
        JPanel operacao = new JPanel();
        JPanel operacao2 = new JPanel();
        BorderLayout borLay = new BorderLayout();
        GridLayout floLay = new GridLayout(0, 2, 5, 10);
        operacao.setLayout(floLay);
        operacao2.setLayout(floLay);
        // operacao2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        this.setLayout(new BorderLayout());
        DefaultListModel listModel = new DefaultListModel();
        if (obj.getClass() == new Aeronave().getClass()) {
            for (Aeronave a : cia.aeronaves) {
                listModel.addElement(a);
            }
        } else if (obj.getClass() == new Cliente().getClass()) {
            for (Cliente c : cia.clientes) {
                listModel.addElement(c);
            }
        } else if (obj.getClass() == new Destino().getClass()) {
            for (Destino d : cia.destinos) {
                listModel.addElement(d);
            }
        } else if (obj.getClass() == new Reserva().getClass()) {
            for (Reserva r : cia.reservas) {
                listModel.addElement(r);
            }
        } else if (obj.getClass() == new Voo().getClass()) {
            for (Voo v : cia.voos) {
                listModel.addElement(v);
            }
        }
        final JList list = new JList(listModel);

        list.setLayoutOrientation(JList.VERTICAL);
        list.setVisible(true);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scroll = new JScrollPane(list);
        scroll.setPreferredSize(new Dimension(100, 500));
        scroll.setName("scroll_lista");
        this.add(operacao);
        operacao.add(scroll, BorderLayout.WEST);
        operacao.add(operacao2, BorderLayout.CENTER);

        final List jt = new ArrayList<>();
        //final List<JCheckBox> listaCheck = new ArrayList<>();

        for (Field campo : reflection.getDeclaredFields()) {
            if (campo.getType().isPrimitive() || campo.getType() == new String().getClass()) {
                if (campo.getType() == boolean.class) {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }
                    operacao2.add(new JLabel(name));
                    JCheckBox jcb = new JCheckBox();
                    jcb.setName(campo.getName());
                    operacao2.add(jcb);
                    jt.add(jcb);

                } else {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }
                    operacao2.add(new JLabel(name));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(true);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }
            }
        }
        // Coloca os campos da classe Pessoa.
        if (obj.getClass() == new Cliente().getClass()) {
            Class reflect = new Pessoa().getClass();
            for (Field campo : reflect.getDeclaredFields()) {
                if (campo.getType().isPrimitive()
                        || campo.getType() == new String().getClass()) {
                    operacao2.add(new JLabel(campo.getName()));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(true);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }
            }
        }
        list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                int i = list.getSelectedIndex();
                if (i != -1) {
                    if (obj.getClass() == new Aeronave().getClass()) {
                        Aeronave aero = new Aeronave();
                        List<String> aux = aero.consultarAeronave(cia.aeronaves
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Cliente().getClass()) {
                        Cliente cli = new Cliente();
                        List<String> aux = cli.consultarCliente(cia.clientes
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Destino().getClass()) {
                        Destino des = new Destino();
                        List<String> aux = des.consultarDestino(cia.destinos
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Reserva().getClass()) {
                        Reserva res = new Reserva();
                        List<String> aux = res.consultarReserva(cia.reservas
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Voo().getClass()) {
                        Voo vo = new Voo();
                        List<String> aux = vo.consultarVoo(cia.voos.get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    }
                    indexxx = i;
                }
            }
        });

        list.setCellRenderer(new CellRenderer());
        JButton botao = new JButton("Alterar");
        botao.setName(obj.toString());
        operacao2.add(botao);
        operacao.setName("container_lista_campos");
        operacao2.setName(obj.getClass().toString());
        botao.addActionListener(this);

        this.validate();
        this.repaint();
    }

    private void criaInterfaceGraficaConsultar(final Object obj) {
        removePanelAnterior();
        Class reflection = obj.getClass();
        JPanel operacao = new JPanel();
        JPanel operacao2 = new JPanel();
        BorderLayout borLay = new BorderLayout();
        GridLayout floLay = new GridLayout(0, 2, 5, 10);
        operacao.setLayout(floLay);
        operacao2.setLayout(floLay);
        // operacao2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        this.setLayout(new BorderLayout());
        DefaultListModel listModel = new DefaultListModel();
        if (obj.getClass() == new Aeronave().getClass()) {
            for (Aeronave a : cia.aeronaves) {
                listModel.addElement(a);
            }
        } else if (obj.getClass() == new Cliente().getClass()) {
            for (Cliente c : cia.clientes) {
                listModel.addElement(c);
            }
        } else if (obj.getClass() == new Destino().getClass()) {
            for (Destino d : cia.destinos) {
                listModel.addElement(d);
            }
        } else if (obj.getClass() == new Reserva().getClass()) {
            for (Reserva r : cia.reservas) {
                listModel.addElement(r);
            }
        } else if (obj.getClass() == new Voo().getClass()) {
            for (Voo v : cia.voos) {
                listModel.addElement(v);
            }
        }
        final JList list = new JList(listModel);
        list.setLayoutOrientation(JList.VERTICAL);
        list.setVisible(true);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scroll = new JScrollPane(list);
        scroll.setPreferredSize(new Dimension(100, 500));
        scroll.setName("scroll_lista");
        this.add(operacao);
        operacao.add(scroll, BorderLayout.WEST);
        operacao.add(operacao2, BorderLayout.CENTER);

        final List jt = new ArrayList<>();
        //final List<JCheckBox> listaCheck = new ArrayList<>();

        for (Field campo : reflection.getDeclaredFields()) {
            if (campo.getType().isPrimitive() || campo.getType() == new String().getClass()) {
                if (campo.getType() == boolean.class) {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }
                    operacao2.add(new JLabel(name));
                    JCheckBox jcb = new JCheckBox();
                    jcb.setName(campo.getName());
                    operacao2.add(jcb);
                    jt.add(jcb);

                } else {
                    String name = new String();
                    for (String str : campo.getName().split("_")) {
                        name += " " + str.substring(0, 1).toUpperCase() + str.substring(1);
                    }
                    operacao2.add(new JLabel(name));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(false);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }
            }else if (campo.getType() == new Endereco().getClass()){
                operacao2.add(new JLabel("Endereco"));
                JTextField jtf = new JTextField();
                jtf.setName(campo.getName());

                jtf.setEditable(false);
                operacao2.add(jtf);
                jt.add(jtf);
            }
        }
        // Coloca os campos da classe Pessoa.
        if (obj.getClass() == new Cliente().getClass()) {
            Class reflect = new Pessoa().getClass();
            for (Field campo : reflect.getDeclaredFields()) {
                if (campo.getType().isPrimitive()
                        || campo.getType() == new String().getClass()) {
                    operacao2.add(new JLabel(campo.getName()));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(false);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }else{
                    operacao2.add(new JLabel("Endereco"));
                    JTextField jtf = new JTextField();
                    jtf.setName(campo.getName());

                    jtf.setEditable(false);
                    operacao2.add(jtf);
                    jt.add(jtf);
                }
            }
        }
        list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                int i = list.getSelectedIndex();
                if (i != -1) {
                    if (obj.getClass() == new Aeronave().getClass()) {
                        Aeronave aero = new Aeronave();
                        List<String> aux = aero.consultarAeronave(cia.aeronaves
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Cliente().getClass()) {
                        Cliente cli = new Cliente();
                        List<String> aux = cli.consultarCliente(cia.clientes
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Destino().getClass()) {
                        Destino des = new Destino();
                        List<String> aux = des.consultarDestino(cia.destinos
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Reserva().getClass()) {
                        Reserva res = new Reserva();
                        List<String> aux = res.consultarReserva(cia.reservas
                                .get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    } else if (obj.getClass() == new Voo().getClass()) {
                        Voo vo = new Voo();
                        List<String> aux = vo.consultarVoo(cia.voos.get(i));
                        for (int j = 0; j < jt.size(); j++) {
                            if (jt.get(j).getClass() == new JTextField().getClass()) {
                                JTextField tf = (JTextField) jt.get(j);
                                tf.setText(aux.get(j));
                            } else if (jt.get(j).getClass() == new JCheckBox().getClass()) {
                                JCheckBox tb = (JCheckBox) jt.get(j);
                                tb.setSelected(Boolean.valueOf(aux.get(j).toString()));
                            }
                            //System.out.println(jt.get(j));

                        }

                    }

                }
            }
        });
        list.setCellRenderer(new CellRenderer());
        operacao.setName("container_lista_campos");
        operacao2.setName(obj.getClass().toString());

        this.validate();
        this.repaint();
    }

    private void criaInterfaceGraficaFaturamento(boolean otimista) {
        removePanelAnterior();
        JPanel operacao = new JPanel();
        GridLayout floLay = new GridLayout(0, 2, 5, 10);
        operacao.setLayout(floLay);

        this.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        this.add(operacao);

        JTextField jtf = new JTextField();
        JTextField jtf2 = new JTextField();
        JTextField jtf3 = new JTextField();
        jtf.setEditable(false);
        jtf2.setEditable(false);
        jtf3.setEditable(false);

        operacao.add(new JLabel("Reservas totais:"));

        jtf.setText(String.valueOf(cia.reservas.size()));
        operacao.add(jtf);

        int contador = 0;

        for (Reserva res : cia.reservas) {
            if (res.isAtivo()) {
                contador++;
            }
        }
        operacao.add(new JLabel("Reservas ativas:"));
        jtf2.setText(String.valueOf(contador));
        operacao.add(jtf2);

        if (otimista) {
            operacao.add(new JLabel(
                    "Faturamento otimista (nenhum novo cancelamento):"));
            jtf3.setText(String.valueOf(cia.estimarFaturamentoOtimista())
                    + " R$");
            operacao.add(jtf3);
        } else {
            int num = cia.reservas.size() - contador;
            operacao.add(new JLabel("Faturamento otimista (" + num
                    + "novo(s) cancelamento(s)):"));
            jtf3.setText(String.valueOf(cia.estimarFaturamentoPessimista())
                    + " R$");
            operacao.add(jtf3);
        }

        this.validate();
        this.repaint();
    }

    private void c_destinoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_c_destinoActionPerformed

        // TODO add your handling code here:
        Destino dest = new Destino();
        criaInterfaceGrafica(dest, false, false);
        // CDestino cDestino = new CDestino(this, true);
        // cDestino.setVisible(true);
    }// GEN-LAST:event_c_destinoActionPerformed

    private void c_reservaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_c_reservaActionPerformed
        // TODO add your handling code here:
        Reserva res = new Reserva();
        criaInterfaceGrafica(res, false, false);
    }// GEN-LAST:event_c_reservaActionPerformed

    private void c_vooActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_c_vooActionPerformed
        // TODO add your handling code here:
        Voo voo = new Voo();
        criaInterfaceGrafica(voo, false, false);
    }// GEN-LAST:event_c_vooActionPerformed

    private void a_aeronaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_a_aeronaveActionPerformed
        criaInterfaceGraficaAlterar(new Aeronave());
    }// GEN-LAST:event_a_aeronaveActionPerformed

    private void a_clienteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_a_clienteActionPerformed
        criaInterfaceGraficaAlterar(new Cliente());
    }// GEN-LAST:event_a_clienteActionPerformed

    private void a_destinoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_a_destinoActionPerformed
        criaInterfaceGraficaAlterar(new Destino());
    }// GEN-LAST:event_a_destinoActionPerformed

    private void a_reservaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_a_reservaActionPerformed
        criaInterfaceGraficaAlterar(new Reserva());
    }// GEN-LAST:event_a_reservaActionPerformed

    private void a_vooActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_a_vooActionPerformed
        criaInterfaceGraficaAlterar(new Voo());
    }// GEN-LAST:event_a_vooActionPerformed

    private void r_aeronaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_r_aeronaveActionPerformed
        Aeronave aero = new Aeronave();
        criaInterfaceGraficaRemover(aero);
    }// GEN-LAST:event_r_aeronaveActionPerformed

    private void r_reservaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_r_reservaActionPerformed
        // TODO add your handling code here:
        criaInterfaceGraficaRemover(new Reserva());
    }// GEN-LAST:event_r_reservaActionPerformed

    private void r_vooActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_r_vooActionPerformed
        // TODO add your handling code here:
        criaInterfaceGraficaRemover(new Voo());
    }// GEN-LAST:event_r_vooActionPerformed

    private void r_destinoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_r_destinoActionPerformed
        // TODO add your handling code here:
        criaInterfaceGraficaRemover(new Destino());
    }// GEN-LAST:event_r_destinoActionPerformed

    private void r_clienteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_r_clienteActionPerformed
        // TODO add your handling code here:
        criaInterfaceGraficaRemover(new Cliente());
    }// GEN-LAST:event_r_clienteActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
        boolean a = true;
        criaInterfaceGraficaFaturamento(a);
    }// GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem4ActionPerformed
        criaInterfaceGraficaConsultar(new Cliente());
    }// GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem3ActionPerformed
        criaInterfaceGraficaConsultar(new Aeronave());
    }// GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem5ActionPerformed
        criaInterfaceGraficaConsultar(new Destino());
    }// GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem6ActionPerformed
        criaInterfaceGraficaConsultar(new Reserva());
    }// GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem7ActionPerformed
        criaInterfaceGraficaConsultar(new Voo());
    }// GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
        boolean a = false;
        criaInterfaceGraficaFaturamento(a);
    }// GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
		/*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CiaAerea cpia = new CiaAerea();
                new MainGUI(cpia).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem a_aeronave;
    private javax.swing.JMenuItem a_cliente;
    private javax.swing.JMenuItem a_destino;
    private javax.swing.JMenuItem a_reserva;
    private javax.swing.JMenuItem a_voo;
    private javax.swing.JMenuItem c_aeronave;
    private javax.swing.JMenuItem c_cliente;
    private javax.swing.JMenuItem c_destino;
    private javax.swing.JMenuItem c_reserva;
    private javax.swing.JMenuItem c_voo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem quitMenu;
    private javax.swing.JMenuItem r_aeronave;
    private javax.swing.JMenuItem r_cliente;
    private javax.swing.JMenuItem r_destino;
    private javax.swing.JMenuItem r_reserva;
    private javax.swing.JMenuItem r_voo;
    // End of variables declaration//GEN-END:variables
    @Override
    public void valueChanged(ListSelectionEvent lse) {
        throw new UnsupportedOperationException("Not supported yet."); // To
        // change
        // body
        // of
        // generated
        // methods,
        // choose
        // Tools
        // |
        // Templates.
    }
}
